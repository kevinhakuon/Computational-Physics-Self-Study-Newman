import numpy as np
from numpy import empty, arange, sqrt, sin, cos, pi, exp, linspace
from pylab import imshow, show, gray, plot, scatter, axhline, loglog
from scipy.special import roots_legendre
from scipy.constants import k, hbar, c


def intensity_tran_func (u, seperation = 20e-6):
    
    alpha = pi / seperation

    intensity_rate = sin(alpha * u)**2

    return(intensity_rate)

class GaussIntegrator:

    def __init__(self, N = 100):
        self.N = N
        self.x, self.w = roots_legendre(N)

    def Gauss_quadrature (self, lower_bound, upper_bound, func, parameter):

        if(lower_bound == upper_bound):
            return  0 

        x_value = (upper_bound - lower_bound) * self.x / 2 + (upper_bound + lower_bound) / 2
        weight = (upper_bound - lower_bound) * self.w / 2

        integral = sum(weight[i] * func(parameter, x_value[i]) for i in range (len(x_value)))

        return integral
        
def Intensity (wavelength = 500e-9, seperation = 20e-6, slit_num = 10,
               screen_wide = 10e-2, focal_length = 1, sample_point = 500):
    
    total_width = seperation * (slit_num - 1)

    intensity_integrand = lambda x, u : (sqrt(intensity_tran_func(u)) * exp(2 * pi * x * u * 1j / (wavelength * focal_length)))

    x_list = linspace(-screen_wide / 2, screen_wide / 2, sample_point)

    integral = GaussIntegrator()
    intensity_list = abs(integral.Gauss_quadrature(-total_width / 2, total_width / 2, intensity_integrand, x_list)) ** 2

    return x_list, intensity_list

def density_plot(x_list, intensity_list):

    density_distribution = empty([100, len(x_list)], float)
    for i in range (len(x_list)):
        density_distribution[:, i] = intensity_list[i]

    imshow(np.log1p(density_distribution), vmin = 0)

    show()


density_plot(*Intensity())
