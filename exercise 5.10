import numpy as np
from numpy import empty, arange, sqrt, sin, cos, pi, exp, linspace
from pylab import imshow, show, gray, plot, scatter, axhline, loglog
from scipy.special import roots_legendre
from scipy.constants import k

C_func = lambda t : cos(pi * t**2 / 2)
S_func = lambda t : sin(pi * t**2 / 2)


def Gauss_quadrature (lower_bound, upper_bound, func, N = 50):

    if(lower_bound == upper_bound):
        return  0  
    elif(lower_bound > upper_bound):
        lower_bound, upper_bound = upper_bound, lower_bound

    x, w = roots_legendre(N)

    x_value = (upper_bound - lower_bound) * x / 2 + (upper_bound + lower_bound) / 2
    weight = (upper_bound - lower_bound) * w / 2

    integral = sum(weight * func(x_value))

    if(lower_bound > upper_bound):
        return - integral
    else:
        return integral


def near_field_diffraction (x_lower_bound = -5, x_upper_bound = 5, z_location = 3, wavelength = 1, N = 100):
    
    u = lambda x, z : x * sqrt(2 / wavelength * z)

    x_list = linspace(x_lower_bound, x_upper_bound, N)
    u_list = u(x_list, z_location)

    Intensity = []
    
    for u_value in u_list:
        Intensity.append(((2 * Gauss_quadrature(0, u_value, C_func) + 1)**2 +
                        (2 * Gauss_quadrature(0, u_value, S_func) + 1)**2) / 8)
    
    plot(x_list, Intensity)
    show()


near_field_diffraction()
